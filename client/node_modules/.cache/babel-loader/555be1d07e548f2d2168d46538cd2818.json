{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\zimin\\\\Desktop\\\\college\\\\Homework\\\\\\u0421\\u0430\\u0439\\u0442\\u044B\\\\React_Apps\\\\Ellinline\\\\client\\\\src\\\\components\\\\Admin\\\\FormDBChange\\\\UpdateDB\\\\Countries.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Message from '../../../Common/DialogWindow/Message';\nimport { useForm } from \"react-hook-form\";\nimport SelectEntered from '../../../CustomElements/SelectEntered';\nimport TextArea from '../../../CustomElements/TextArea';\nimport Button from '../../../CustomElements/Button';\nimport classes from './Countries.module.css';\n\nconst Countries = () => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const [message, setMessage] = useState({\n    style: {\n      display: 'none'\n    },\n    status: '',\n    body: ''\n  });\n  const [formData, setFormData] = useState({});\n  const [dbData, setDbData] = useState({});\n  const [textAreaValue, setTextAreaValue] = useState();\n  let countries = {};\n  let nameCountryIds = {};\n\n  if (Object.keys(dbData).length != 0) {\n    dbData.map(country => {\n      countries[country.name] = country.description;\n      nameCountryIds[country.name] = country.id;\n    });\n  }\n\n  const handleOnSubmit = data => {\n    data.id = nameCountryIds[data.country];\n    delete data.country;\n    setFormData(data);\n  };\n\n  useEffect(() => {\n    async function get() {\n      await fetch('http://localhost:4000/api/countries?with=description').then(response => {\n        return response.json();\n      }).then(data => {\n        setDbData(data);\n      });\n    }\n\n    get();\n  }, []);\n  useEffect(() => {\n    async function insert() {\n      const json = await fetch('http://localhost:4000/api/countries', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(formData)\n      });\n      setMessage({\n        style: {\n          display: 'grid'\n        },\n        status: json.status,\n        body: json.statusText\n      });\n    }\n\n    if (Object.keys(formData).length != 0) {\n      insert();\n    }\n  }, [formData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Message, {\n      setFunction: setMessage,\n      style: message.style,\n      status: message.status,\n      body: message.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: handleSubmit(handleOnSubmit),\n      children: [/*#__PURE__*/_jsxDEV(SelectEntered, {\n        register: register({\n          required: true\n        }),\n        name: \"country\",\n        className: classes.select,\n        placeholder: \"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0430\",\n        options: Object.keys(countries)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n        classTextArea: classes.textarea,\n        register: register({\n          required: true\n        }),\n        name: \"description\",\n        className: classes.textarea,\n        title: \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435\",\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435\",\n        value: textAreaValue,\n        setValue: setTextAreaValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.buttons,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          setFunction: setTextAreaValue,\n          data: countries,\n          nameOfLink: \"country\",\n          className: classes.button_description,\n          classInput: classes.button__text,\n          value: \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.button_change,\n          classInput: classes.button__text,\n          value: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Countries, \"R/gRdQYe+VlnnbvCyhO4d+FaK0o=\", false, function () {\n  return [useForm];\n});\n\n_c = Countries;\nexport default Countries;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"sources":["C:/Users/zimin/Desktop/college/Homework/Сайты/React_Apps/Ellinline/client/src/components/Admin/FormDBChange/UpdateDB/Countries.jsx"],"names":["React","useState","useEffect","Message","useForm","SelectEntered","TextArea","Button","classes","Countries","register","handleSubmit","errors","message","setMessage","style","display","status","body","formData","setFormData","dbData","setDbData","textAreaValue","setTextAreaValue","countries","nameCountryIds","Object","keys","length","map","country","name","description","id","handleOnSubmit","data","get","fetch","then","response","json","insert","method","headers","JSON","stringify","statusText","form","required","select","textarea","buttons","button_description","button__text","button_change"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Message from '../../../Common/DialogWindow/Message';\r\nimport { useForm } from \"react-hook-form\";\r\nimport SelectEntered from '../../../CustomElements/SelectEntered';\r\nimport TextArea from '../../../CustomElements/TextArea';\r\nimport Button from '../../../CustomElements/Button';\r\nimport classes from './Countries.module.css';\r\n\r\nconst Countries = () => {\r\n\r\n    const {register, handleSubmit, errors} = useForm();\r\n    const [message, setMessage] = useState({style: {display: 'none'}, status: '', body: ''});\r\n    const [formData, setFormData] = useState({}); \r\n    const [dbData, setDbData] = useState({});\r\n    const [textAreaValue, setTextAreaValue] = useState();\r\n\r\n    let countries = {};\r\n    let nameCountryIds = {};\r\n\r\n    if (Object.keys(dbData).length != 0)\r\n    {\r\n        dbData.map((country)=>{\r\n\r\n            countries[country.name] = country.description;\r\n            nameCountryIds[country.name] = country.id;\r\n        })\r\n    }\r\n    const handleOnSubmit = (data)=>{\r\n        \r\n        data.id = nameCountryIds[data.country];\r\n        delete data.country;\r\n        setFormData(data);\r\n        \r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        async function get()\r\n        {\r\n            await fetch('http://localhost:4000/api/countries?with=description')\r\n              .then((response) => {\r\n                return response.json();\r\n              })\r\n              .then((data) => {\r\n                setDbData(data);\r\n              });\r\n            \r\n            \r\n            \r\n            \r\n        }\r\n        get();\r\n        \r\n        \r\n\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n\r\n        async function insert()\r\n        {\r\n       \r\n            const json =  await fetch('http://localhost:4000/api/countries', {\r\n                method: 'PUT',\r\n                headers: {\r\n                  'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(formData)\r\n            });\r\n            \r\n\r\n           \r\n            setMessage({style: {display: 'grid'}, status: json.status, body: json.statusText});\r\n            \r\n            \r\n            \r\n            \r\n        }\r\n        if (Object.keys(formData).length != 0)\r\n        {\r\n            insert()\r\n        }\r\n\r\n    }, [formData])\r\n    \r\n    return (\r\n        <>\r\n            <Message setFunction={setMessage} style={message.style} \r\n            status={message.status} body={message.body}/>\r\n            <form className={classes.form} onSubmit={handleSubmit(handleOnSubmit)}>\r\n                <SelectEntered register={register({required: true})} name='country'\r\n                className={classes.select} placeholder='Страна' options={Object.keys(countries)} />\r\n                \r\n                <TextArea classTextArea={classes.textarea} register={register({required: true})} name='description'\r\n                className={classes.textarea} title='Описание' placeholder='Введите описание' value={textAreaValue} setValue={setTextAreaValue}/>\r\n\r\n                <div className={classes.buttons}>\r\n                    <Button type='button' setFunction={setTextAreaValue} data={countries} nameOfLink='country'\r\n                    className={classes.button_description} classInput={classes.button__text} value='Получить описание' />\r\n                    <Button className={classes.button_change} classInput={classes.button__text} value='Изменить' />\r\n                </div>\r\n            </form>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Countries\r\n"]},"metadata":{},"sourceType":"module"}