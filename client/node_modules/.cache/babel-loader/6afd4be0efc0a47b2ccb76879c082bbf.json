{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\zimin\\\\Desktop\\\\college\\\\Homework\\\\\\u0421\\u0430\\u0439\\u0442\\u044B\\\\React_Apps\\\\Ellinline\\\\client\\\\src\\\\components\\\\Admin\\\\FormDBChange\\\\DeleteDB\\\\Cities.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Message from '../../../Common/DialogWindow/Message';\nimport { useForm } from \"react-hook-form\";\nimport InputText from '../../../CustomElements/InputText';\nimport SelectEntered from '../../../CustomElements/SelectEntered';\nimport Button from '../../../CustomElements/Button';\nimport classes from './Cities.module.css';\n\nconst Cities = props => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const [message, setMessage] = useState({\n    style: {\n      display: 'none'\n    },\n    status: '',\n    body: ''\n  });\n  const [formData, setFormData] = useState({});\n  const [dbData, setDbData] = useState({});\n  let cities = [];\n\n  if (Object.keys(dbData).length != 0) {\n    dbData.map(city => {\n      cities[city.name] = city.id;\n    });\n  }\n\n  const handleOnSubmit = data => {\n    data.id = cities[data.city];\n    delete data.city;\n    setFormData(data);\n  };\n\n  useEffect(() => {\n    async function get() {\n      await fetch('http://localhost:4000/api/cities').then(response => {\n        return response.json();\n      }).then(data => {\n        setDbData(data);\n      });\n    }\n\n    get();\n  }, []);\n  useEffect(() => {\n    async function insert() {\n      const json = await fetch('http://localhost:4000/api/cities', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(formData)\n      });\n      setMessage({\n        style: {\n          display: 'grid'\n        },\n        status: json.status,\n        body: json.statusText\n      });\n    }\n\n    if (Object.keys(formData).length != 0) {\n      insert();\n    }\n  }, [formData]); //console.log(dbData);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Message, {\n      setFunction: setMessage,\n      style: message.style,\n      status: message.status,\n      body: message.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: props.className + ' ' + classes.form,\n      onSubmit: handleSubmit(handleOnSubmit),\n      children: [/*#__PURE__*/_jsxDEV(SelectEntered, {\n        register: register({\n          required: true\n        }),\n        name: \"city\",\n        className: classes.select,\n        options: Object.keys(cities),\n        placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        classInput: classes.button__text,\n        value: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Cities, \"Wy1hYEaGGTQnopJgSldizjde1KE=\", false, function () {\n  return [useForm];\n});\n\n_c = Cities;\nexport default Cities;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cities\");","map":{"version":3,"sources":["C:/Users/zimin/Desktop/college/Homework/Сайты/React_Apps/Ellinline/client/src/components/Admin/FormDBChange/DeleteDB/Cities.jsx"],"names":["React","useState","useEffect","Message","useForm","InputText","SelectEntered","Button","classes","Cities","props","register","handleSubmit","errors","message","setMessage","style","display","status","body","formData","setFormData","dbData","setDbData","cities","Object","keys","length","map","city","name","id","handleOnSubmit","data","get","fetch","then","response","json","insert","method","headers","JSON","stringify","statusText","className","form","required","select","button","button__text"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Message from '../../../Common/DialogWindow/Message';\r\nimport { useForm } from \"react-hook-form\";\r\nimport InputText from '../../../CustomElements/InputText';\r\nimport SelectEntered from '../../../CustomElements/SelectEntered';\r\nimport Button from '../../../CustomElements/Button';\r\nimport classes from './Cities.module.css';\r\n\r\nconst Cities = (props) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm();\r\n    const [message, setMessage] = useState({style: {display: 'none'}, status: '', body: ''});\r\n    const [formData, setFormData] = useState({}); \r\n    const [dbData, setDbData] = useState({});\r\n\r\n    let cities = [];\r\n\r\n    if (Object.keys(dbData).length != 0) \r\n    {\r\n        dbData.map(city => {\r\n            cities[city.name] = city.id\r\n        });\r\n    }\r\n    const handleOnSubmit = (data)=>{\r\n        \r\n        data.id = cities[data.city];\r\n        delete data.city;\r\n        setFormData(data);\r\n    }\r\n    useEffect(()=>{\r\n\r\n        async function get()\r\n        {\r\n            await fetch('http://localhost:4000/api/cities')\r\n              .then((response) => {\r\n                return response.json();\r\n              })\r\n              .then((data) => {\r\n                setDbData(data);\r\n              });\r\n            \r\n            \r\n            \r\n            \r\n        }\r\n        get();\r\n        \r\n        \r\n\r\n    }, [])\r\n    useEffect(()=>{\r\n\r\n        async function insert()\r\n        {\r\n       \r\n            const json =  await fetch('http://localhost:4000/api/cities', {\r\n                method: 'DELETE',\r\n                headers: {\r\n                  'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(formData)\r\n            });\r\n            \r\n\r\n           \r\n            setMessage({style: {display: 'grid'}, status: json.status, body: json.statusText});\r\n            \r\n            \r\n            \r\n            \r\n        }\r\n        if (Object.keys(formData).length != 0)\r\n        {\r\n            insert()\r\n        }\r\n\r\n    }, [formData])\r\n    //console.log(dbData);\r\n    return (\r\n        <>\r\n            <Message setFunction={setMessage} style={message.style} status={message.status} body={message.body}/>\r\n            <form className={props.className + ' ' + classes.form} onSubmit={handleSubmit(handleOnSubmit)}>\r\n               \r\n                <SelectEntered register={register({required: true})} name='city' className={classes.select} \r\n                options={Object.keys(cities)} placeholder='Название города'/>\r\n\r\n                <Button className={classes.button} classInput={classes.button__text} value='Удалить' />\r\n            </form>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cities\r\n"]},"metadata":{},"sourceType":"module"}