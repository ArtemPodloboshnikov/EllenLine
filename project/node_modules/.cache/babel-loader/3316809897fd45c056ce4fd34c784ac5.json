{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\zimin\\\\Desktop\\\\college\\\\Homework\\\\\\u0421\\u0430\\u0439\\u0442\\u044B\\\\React_Apps\\\\Ellinline\\\\client\\\\src\\\\components\\\\CustomElements\\\\SelectEntered.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classes from './SelectEntered.module.css';\n\nconst SelectEntered = props => {\n  _s();\n\n  const [value, setValue] = useState(props.value);\n  const [arrowClass, setArrowClass] = useState(classes.arrowDown);\n  const [possibleData, setPossibleData] = useState([]);\n\n  const onClickOption = e => {\n    setArrowClass(classes.arrowDown);\n    setPossibleData([]);\n    setValue(e.target.innerHTML);\n\n    if (props.onChangeFunction !== undefined) {\n      props.onChangeFunction(e.target.innerHTML);\n    }\n  };\n\n  let data = [];\n  props.options.map(option => {\n    data.push( /*#__PURE__*/_jsxDEV(\"label\", {\n      onClick: onClickOption,\n      for: classes.id,\n      children: option\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 46\n    }, this));\n  });\n\n  const equalsArray = (array1, array2) => {\n    let result = false;\n    if (array1.length != array2.length) return result;\n\n    for (let i = 0; i < array1.length; i++) {\n      if (array1[i].props.children === array2[i].props.children) {\n        result = true;\n      } else {\n        result = false;\n      }\n    }\n\n    return result;\n  };\n\n  const allOptions = () => {\n    if (!equalsArray(possibleData, data)) {\n      setArrowClass(classes.arrowTop);\n      setPossibleData(data);\n    } else {\n      setArrowClass(classes.arrowDown);\n      setPossibleData([]);\n    }\n  };\n\n  const enterText = e => {\n    let text = e.target.value;\n    let possible = [];\n    data.map(city => {\n      const isFits = city.props.children.indexOf(text);\n\n      if (isFits >= 0) {\n        possible.push(city);\n      }\n    });\n\n    if (text == '') {\n      possible = [];\n    }\n\n    setArrowClass(classes.arrowDown);\n    setPossibleData(possible);\n    setValue(text);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.wrap + ' ' + props.className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.selectInput,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: props.register,\n        name: props.name,\n        placeholder: props.placeholder,\n        id: classes.id,\n        className: classes.input + ' ' + props.classInput,\n        onChange: enterText,\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: allOptions,\n          className: arrowClass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.possibleData,\n      children: possibleData.length ? possibleData : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectEntered, \"bdyKZKuXLyynNwn1+ikwIyV8Bxc=\");\n\n_c = SelectEntered;\nexport default SelectEntered;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectEntered\");","map":{"version":3,"sources":["C:/Users/zimin/Desktop/college/Homework/Сайты/React_Apps/Ellinline/client/src/components/CustomElements/SelectEntered.jsx"],"names":["React","useState","classes","SelectEntered","props","value","setValue","arrowClass","setArrowClass","arrowDown","possibleData","setPossibleData","onClickOption","e","target","innerHTML","onChangeFunction","undefined","data","options","map","option","push","id","equalsArray","array1","array2","result","length","i","children","allOptions","arrowTop","enterText","text","possible","city","isFits","indexOf","wrap","className","selectInput","register","name","placeholder","input","classInput"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,4BAApB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAE7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACG,KAAK,CAACC,KAAP,CAAlC;AACA,QAAM,CAACE,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAACC,OAAO,CAACO,SAAT,CAA5C;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMW,aAAa,GAAIC,CAAD,IAAO;AAEzBL,IAAAA,aAAa,CAACN,OAAO,CAACO,SAAT,CAAb;AACAE,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAL,IAAAA,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASC,SAAV,CAAR;;AACA,QAAIX,KAAK,CAACY,gBAAN,KAA2BC,SAA/B,EACA;AACIb,MAAAA,KAAK,CAACY,gBAAN,CAAuBH,CAAC,CAACC,MAAF,CAASC,SAAhC;AACH;AACJ,GATD;;AAUA,MAAIG,IAAI,GAAG,EAAX;AACAd,EAAAA,KAAK,CAACe,OAAN,CAAcC,GAAd,CAAmBC,MAAD,IAAY;AAACH,IAAAA,IAAI,CAACI,IAAL,eAAU;AAAO,MAAA,OAAO,EAAEV,aAAhB;AAA+B,MAAA,GAAG,EAAEV,OAAO,CAACqB,EAA5C;AAAA,gBAAiDF;AAAjD;AAAA;AAAA;AAAA;AAAA,YAAV;AAA4E,GAA3G;;AAEA,QAAMG,WAAW,GAAG,CAACC,MAAD,EAASC,MAAT,KAAmB;AAEnC,QAAIC,MAAM,GAAG,KAAb;AACA,QAAIF,MAAM,CAACG,MAAP,IAAiBF,MAAM,CAACE,MAA5B,EAAoC,OAAOD,MAAP;;AAEpC,SAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,MAAM,CAACG,MAA1B,EAAkCC,CAAC,EAAnC,EAAsC;AAElC,UAAIJ,MAAM,CAACI,CAAD,CAAN,CAAUzB,KAAV,CAAgB0B,QAAhB,KAA6BJ,MAAM,CAACG,CAAD,CAAN,CAAUzB,KAAV,CAAgB0B,QAAjD,EACA;AACIH,QAAAA,MAAM,GAAG,IAAT;AACH,OAHD,MAII;AAEAA,QAAAA,MAAM,GAAG,KAAT;AACH;AACJ;;AAED,WAAOA,MAAP;AACH,GAlBD;;AAoBA,QAAMI,UAAU,GAAG,MAAM;AAGrB,QAAI,CAACP,WAAW,CAACd,YAAD,EAAeQ,IAAf,CAAhB,EACA;AACIV,MAAAA,aAAa,CAACN,OAAO,CAAC8B,QAAT,CAAb;AACArB,MAAAA,eAAe,CAACO,IAAD,CAAf;AACH,KAJD,MAKI;AAEAV,MAAAA,aAAa,CAACN,OAAO,CAACO,SAAT,CAAb;AACAE,MAAAA,eAAe,CAAC,EAAD,CAAf;AACH;AAGJ,GAfD;;AAgBA,QAAMsB,SAAS,GAAIpB,CAAD,IAAO;AAErB,QAAIqB,IAAI,GAAGrB,CAAC,CAACC,MAAF,CAAST,KAApB;AAEA,QAAI8B,QAAQ,GAAG,EAAf;AAEAjB,IAAAA,IAAI,CAACE,GAAL,CAAUgB,IAAD,IAAQ;AAEb,YAAMC,MAAM,GAAGD,IAAI,CAAChC,KAAL,CAAW0B,QAAX,CAAoBQ,OAApB,CAA4BJ,IAA5B,CAAf;;AACA,UAAIG,MAAM,IAAI,CAAd,EACA;AACIF,QAAAA,QAAQ,CAACb,IAAT,CAAcc,IAAd;AACH;AACJ,KAPD;;AAQA,QAAIF,IAAI,IAAI,EAAZ,EACA;AACIC,MAAAA,QAAQ,GAAG,EAAX;AACH;;AAED3B,IAAAA,aAAa,CAACN,OAAO,CAACO,SAAT,CAAb;AACAE,IAAAA,eAAe,CAACwB,QAAD,CAAf;AACA7B,IAAAA,QAAQ,CAAC4B,IAAD,CAAR;AAEH,GAvBD;;AAwBA,sBACI;AAAK,IAAA,SAAS,EAAEhC,OAAO,CAACqC,IAAR,GAAe,GAAf,GAAqBnC,KAAK,CAACoC,SAA3C;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEtC,OAAO,CAACuC,WAAxB;AAAA,8BACI;AAAO,QAAA,GAAG,EAAErC,KAAK,CAACsC,QAAlB;AAA4B,QAAA,IAAI,EAAEtC,KAAK,CAACuC,IAAxC;AAA8C,QAAA,WAAW,EAAEvC,KAAK,CAACwC,WAAjE;AAA8E,QAAA,EAAE,EAAE1C,OAAO,CAACqB,EAA1F;AACA,QAAA,SAAS,EAAErB,OAAO,CAAC2C,KAAR,GAAgB,GAAhB,GAAsBzC,KAAK,CAAC0C,UADvC;AACmD,QAAA,QAAQ,EAAEb,SAD7D;AACwE,QAAA,KAAK,EAAE5B;AAD/E;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAA,+BAAK;AAAK,UAAA,OAAO,EAAE0B,UAAd;AAA0B,UAAA,SAAS,EAAExB;AAArC;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAK,MAAA,SAAS,EAAEL,OAAO,CAACQ,YAAxB;AAAA,gBAAuCA,YAAY,CAACkB,MAAb,GAAsBlB,YAAtB,GAAoC;AAA3E;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAzFD;;GAAMP,a;;KAAAA,a;AA2FN,eAAeA,aAAf","sourcesContent":["import React, {useState} from 'react'\r\nimport classes from './SelectEntered.module.css';\r\n\r\nconst SelectEntered = (props) => {\r\n\r\n    const [value, setValue] = useState(props.value);\r\n    const [arrowClass, setArrowClass] = useState(classes.arrowDown);\r\n    const [possibleData, setPossibleData] = useState([]);\r\n\r\n    const onClickOption = (e) => {\r\n\r\n        setArrowClass(classes.arrowDown);\r\n        setPossibleData([]);\r\n        setValue(e.target.innerHTML);\r\n        if (props.onChangeFunction !== undefined)\r\n        {\r\n            props.onChangeFunction(e.target.innerHTML);\r\n        }\r\n    }\r\n    let data = []; \r\n    props.options.map((option) => {data.push(<label onClick={onClickOption} for={classes.id}>{option}</label>)});\r\n\r\n    const equalsArray = (array1, array2) =>{\r\n\r\n        let result = false;\r\n        if (array1.length != array2.length) return result;\r\n        \r\n        for(let i = 0; i < array1.length; i++){\r\n            \r\n            if (array1[i].props.children === array2[i].props.children)\r\n            {\r\n                result = true;\r\n            }\r\n            else{\r\n\r\n                result = false;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n    \r\n    const allOptions = () => {\r\n        \r\n        \r\n        if (!equalsArray(possibleData, data))\r\n        {\r\n            setArrowClass(classes.arrowTop);\r\n            setPossibleData(data);\r\n        }\r\n        else{\r\n\r\n            setArrowClass(classes.arrowDown);\r\n            setPossibleData([]);\r\n        }   \r\n        \r\n        \r\n    }\r\n    const enterText = (e) => {\r\n        \r\n        let text = e.target.value;\r\n\r\n        let possible = [];\r\n\r\n        data.map((city)=>{\r\n\r\n            const isFits = city.props.children.indexOf(text);\r\n            if (isFits >= 0) \r\n            {\r\n                possible.push(city);\r\n            }\r\n        })\r\n        if (text == '')\r\n        {\r\n            possible = [];\r\n        }\r\n       \r\n        setArrowClass(classes.arrowDown);\r\n        setPossibleData(possible);\r\n        setValue(text);\r\n       \r\n    }\r\n    return (\r\n        <div className={classes.wrap + ' ' + props.className}>\r\n            <div className={classes.selectInput}>\r\n                <input ref={props.register} name={props.name} placeholder={props.placeholder} id={classes.id}\r\n                className={classes.input + ' ' + props.classInput} onChange={enterText} value={value}/>\r\n                <div><div onClick={allOptions} className={arrowClass}></div></div>\r\n            </div>\r\n            <div className={classes.possibleData}>{possibleData.length ? possibleData: ''}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectEntered\r\n"]},"metadata":{},"sourceType":"module"}