{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\zimin\\\\Desktop\\\\college\\\\Homework\\\\\\u0421\\u0430\\u0439\\u0442\\u044B\\\\React_Apps\\\\Ellinline\\\\client\\\\src\\\\components\\\\Admin\\\\FormDBChange\\\\UpdateDB\\\\Cities.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Message from '../../../Common/DialogWindow/Message';\nimport { useForm } from \"react-hook-form\";\nimport InputText from '../../../CustomElements/InputText';\nimport SelectEntered from '../../../CustomElements/SelectEntered';\nimport Button from '../../../CustomElements/Button';\nimport classes from './Cities.module.css';\n\nconst Cities = props => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const [message, setMessage] = useState({\n    style: {\n      display: 'none'\n    },\n    status: '',\n    body: ''\n  });\n  const [formData, setFormData] = useState({});\n  const [dbData, setDbData] = useState({});\n  let contries_cities = {\n    countries: {},\n    cities: {}\n  };\n\n  if (Object.keys(dbData).length != 0) {\n    console.log(dbData);\n    dbData.countries.map(data => {\n      contries_cities.countries[data.name] = data.id;\n    });\n    dbData.cities.map(data => {\n      contries_cities.cities[data.name] = data.id;\n    });\n  }\n\n  const handleOnSubmit = data => {\n    data.idCountry = contries_cities.countries[data.country];\n    data.idCity = contries_cities.cities[data.city];\n    delete data.country;\n    delete data.city;\n    setFormData(data);\n  };\n\n  useEffect(() => {\n    async function get() {\n      let result = {};\n      await fetch('http://localhost:4000/api/countries').then(response => {\n        return response.json();\n      }).then(data => {\n        result = {\n          countries: data\n        };\n      });\n      await fetch('http://localhost:4000/api/cities').then(response => {\n        return response.json();\n      }).then(data => {\n        result = { ...result,\n          cities: data\n        };\n      });\n      setDbData(result);\n    }\n\n    get();\n  }, []);\n  useEffect(() => {\n    async function insert() {\n      const json = await fetch('http://localhost:4000/api/cities', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(formData)\n      });\n      setMessage({\n        style: {\n          display: 'grid'\n        },\n        status: json.status,\n        body: json.statusText\n      });\n    }\n\n    if (Object.keys(formData).length != 0) {\n      insert();\n    }\n  }, [formData]);\n  console.log(contries_cities);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Message, {\n      setFunction: setMessage,\n      style: message.style,\n      status: message.status,\n      body: message.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: props.className + ' ' + classes.form,\n      onSubmit: handleSubmit(handleOnSubmit),\n      children: [/*#__PURE__*/_jsxDEV(SelectEntered, {\n        register: register({\n          required: true\n        }),\n        name: \"country\",\n        className: classes.select,\n        options: Object.keys(contries_cities.countries),\n        placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0441\\u0442\\u0440\\u0430\\u043D\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SelectEntered, {\n        register: register({\n          required: true\n        }),\n        name: \"city\",\n        className: classes.select,\n        options: Object.keys(contries_cities.cities),\n        placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        classInput: classes.button__text,\n        value: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Cities, \"Wy1hYEaGGTQnopJgSldizjde1KE=\", false, function () {\n  return [useForm];\n});\n\n_c = Cities;\nexport default Cities;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cities\");","map":{"version":3,"sources":["C:/Users/zimin/Desktop/college/Homework/Сайты/React_Apps/Ellinline/client/src/components/Admin/FormDBChange/UpdateDB/Cities.jsx"],"names":["React","useState","useEffect","Message","useForm","InputText","SelectEntered","Button","classes","Cities","props","register","handleSubmit","errors","message","setMessage","style","display","status","body","formData","setFormData","dbData","setDbData","contries_cities","countries","cities","Object","keys","length","console","log","map","data","name","id","handleOnSubmit","idCountry","country","idCity","city","get","result","fetch","then","response","json","insert","method","headers","JSON","stringify","statusText","className","form","required","select","button","button__text"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Message from '../../../Common/DialogWindow/Message';\r\nimport { useForm } from \"react-hook-form\";\r\nimport InputText from '../../../CustomElements/InputText';\r\nimport SelectEntered from '../../../CustomElements/SelectEntered';\r\nimport Button from '../../../CustomElements/Button';\r\nimport classes from './Cities.module.css';\r\n\r\nconst Cities = (props) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm();\r\n    const [message, setMessage] = useState({style: {display: 'none'}, status: '', body: ''});\r\n    const [formData, setFormData] = useState({}); \r\n    const [dbData, setDbData] = useState({});\r\n\r\n    let contries_cities = {countries: {}, cities: {}};\r\n\r\n    if (Object.keys(dbData).length != 0) \r\n    {\r\n        console.log(dbData)\r\n        dbData.countries.map(data => {\r\n            contries_cities.countries[data.name] =  data.id;\r\n            \r\n        });\r\n        dbData.cities.map(data => {\r\n            contries_cities.cities[data.name] =  data.id;\r\n        });\r\n    }\r\n    const handleOnSubmit = (data)=>{\r\n        \r\n        data.idCountry = contries_cities.countries[data.country];\r\n        data.idCity = contries_cities.cities[data.city];\r\n        delete data.country;\r\n        delete data.city;\r\n        setFormData(data);\r\n    }\r\n    useEffect(()=>{\r\n\r\n        async function get()\r\n        {\r\n            let result = {};\r\n            await fetch('http://localhost:4000/api/countries')\r\n              .then((response) => {\r\n                return response.json();\r\n              })\r\n              .then((data) => {\r\n                result = {countries: data};\r\n              });\r\n            await fetch('http://localhost:4000/api/cities')\r\n              .then((response) => {\r\n                return response.json();\r\n              })\r\n              .then((data) => {\r\n                result = {...result, cities: data};\r\n              });\r\n            \r\n            setDbData(result);\r\n           \r\n        }\r\n        get();\r\n        \r\n        \r\n\r\n    }, [])\r\n    useEffect(()=>{\r\n\r\n        async function insert()\r\n        {\r\n       \r\n            const json =  await fetch('http://localhost:4000/api/cities', {\r\n                method: 'PUT',\r\n                headers: {\r\n                  'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(formData)\r\n            });\r\n            \r\n\r\n           \r\n            setMessage({style: {display: 'grid'}, status: json.status, body: json.statusText});\r\n            \r\n            \r\n            \r\n            \r\n        }\r\n        if (Object.keys(formData).length != 0)\r\n        {\r\n            insert()\r\n        }\r\n\r\n    }, [formData])\r\n    console.log(contries_cities);\r\n    return (\r\n        <>\r\n            <Message setFunction={setMessage} style={message.style} status={message.status} body={message.body}/>\r\n            <form className={props.className + ' ' + classes.form} onSubmit={handleSubmit(handleOnSubmit)}>\r\n                \r\n                <SelectEntered register={register({required: true})} name='country' className={classes.select} \r\n                options={Object.keys(contries_cities.countries)} placeholder='Название страны'/>\r\n\r\n                <SelectEntered register={register({required: true})} name='city' className={classes.select} \r\n                options={Object.keys(contries_cities.cities)} placeholder='Название города'/>\r\n                \r\n\r\n                <Button className={classes.button} classInput={classes.button__text} value='Обновить' />\r\n            </form>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cities\r\n"]},"metadata":{},"sourceType":"module"}